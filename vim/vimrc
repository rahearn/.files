" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=80 foldmarker={,} foldlevel=0 foldmethod=marker:
"
" Organizing my .vimrc files
" I'm borrowing everything from [here](https://github.com/spf13/spf13-vim) and
" am super thankful that Steve Francia has that super helpful guide to his own
" `.vimrc` but also that [he made this](http://vim.spf13.com) for anyone that
" wants to use his standards out-of-the-box without much configurations.
"
" This is still very much a work-in-progress, but I'm finally at a point where
" my original `.vimrc` was making me feel disorganized.
"
" }

" Basics {
    let mapleader = ","
    set magic
    set shell=/usr/local/bin/zsh
    set modeline
    set modelines=5
    set updatetime=100
    set cursorline
    set hidden
    set noerrorbells
    set novisualbell
    set t_vb=
    set number
    set ruler
    set colorcolumn=50,72,80,100
    set backspace=eol,start,indent
    set whichwrap+=<,>,h,l
    set ignorecase
    set smartcase
    set hlsearch
    set incsearch
    set lazyredraw
    set showmatch
    set mat=2
    set tm=500
    set ffs=unix,dos,mac
    set encoding=utf8
    set nobackup
    set nowb
    set noswapfile
    set listchars=eol:¬,tab:›·,trail:·,extends:›,precedes:‹
    set list
    set completeopt=menuone
    set lbr
    set ai
    set si
    set nowrap
    set laststatus=2
" }

" Worflow {
    map 0 ^
    map <f8> :TagbarToggle<cr>
    " Shortcut for disabling highlighting
    nnoremap <silent> <C-l> :nohl<CR><C-l>
    " Shortcut for enabling and disabling paste mode
    map <leader>pp :setlocal paste!<cr>
    " Shortcut for enabling spelling
    map <leader>ss :setlocal spell!<cr>
    " Allow for macosx and tmux and vim clipboard sharing.
    " Following this blog post: http://evertpot.com/osx-tmux-vim-copy-paste-clipboard/
    set clipboard=unnamed
    " Split 'correctly' for left-to-right readers. {
        set splitbelow
        set splitright
    " }
    set history=700
    " For when you forget to sudo.. Really Write the file. {
        cmap w!! w !sudo tee % >/dev/null
    " }
    map <leader>ll :set list!<cr>
    map <space> /
    if has("mac") || has("macunix")
        nmap <D-j> <M-j>
        nmap <D-k> <M-k>
        vmap <D-j> <M-j>
        vmap <D-k> <M-k>
    endif
    " Moving up and down faster than one row at a damn time. {
        nnoremap <C-e> 3<C-e>
        nnoremap <C-y> 3<C-y>
    " }
    " Delete trailing whitespace {
        func! DeleteTrailingWS()
            exe "normal mz"
            %s/\s\+$//ge
            exe "normal `z"
        endfunc
        autocmd BufWrite * :call DeleteTrailingWS()
    " }
    " GUI Options {
        if has( 'gui_running' )
            set guifont=M\+\ 2m\ NerdFont\ Patched:h11
            autocmd! GUIEnter * set vb t_vb=
        endif
    " }
" }

" Load Bundle config {
    if filereadable( expand( "~/.vimrc.bundles" ) )
        source ~/.vimrc.bundles
    endif
" }

" Theme {
    syntax enable
    set background=dark
    colorscheme base16-hopscotch
    set t_Co=256
    let g:airline_theme = 'minimalist'
" }

" Syntastic {
    " Check on open and not on `wq`
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    " Custom checkers
    let g:syntastic_php_checkers = [ "php" ]
    let g:syntastic_javascript_checkers = [ "eslint" ]
    let g:syntastic_sass_checkers = [ "scss-lint" ]
    let g:syntastic_ruby_checkers = [ "mri", "rubocop" ]
    " Enable some 'road' signs
    let g:syntastic_enable_signs = 1
    let g:syntastic_error_symbol = "\uF470 "
    let g:syntastic_warning_symbol = "\uF0E7 "
    " Other options
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_html_tidy_exec = 'tidy'
    "let g:syntastic_html_tidy_blocklevel_tags = ''
" }

" Syntax Folding {
    set foldmethod=syntax
    set foldlevelstart=2
    let php_folding = 1
    let javascript_folding = 1
    let ruby_fold = 1
    let sh_fold_enabled = 1
    let xml_syntax_folding  = 1
    let html_fold_enabled = 1
" }

" TagBar configurations {
    let g:tagbar_type_rust = {
        \ 'ctagstype' : 'rust',
        \ 'kinds' : [
            \'T:types,type definitions',
            \'f:functions,function definitions',
            \'g:enum,enumeration names',
            \'s:structure names',
            \'m:modules,module names',
            \'c:consts,static constants',
            \'t:traits,traits',
            \'i:impls,trait implementations',
        \]
    \}
" }

" Airline Preferences {
    let g:airline_powerline_fonts = 0
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    let g:airline#extensions#whitespace#enabled = 1
    let g:airline#extensions#syntastic#enabled = 1
    let g:airline#extensions#tmuxline#enabled = 1
    if ! exists( 'g:airline_symbols' )
        let g:airline_symbols = {}
        let g:airline_left_sep = "\uF44A "
        let g:airline_right_sep = "\uF438 "
        let g:airline_symbols.space = "\uA0 "
        let g:airline_symbols.crypt = "\uF023 "
        let g:airline_symbols.linenr = "\uF1DD "
        let g:airline_symbols.branch = "\uE702 "
        let g:airline_symbols.paste = "\uF0D0 "
        let g:airline_symbols.whitespace = "\uF1FC "
        let g:airline_symbols.notexists = " \uF440"
    endif
" }

" Control-P {
    let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.?(git|hg|svn|node_modules|exports|bower_components|opencontrols|vendor|target|public|_site)$',
    \ 'file': '\v\.(exe|so|dll)$'
    \ }
" }

" Tmuxline Preferences {
    let g:tmuxline_preset = {
      \'a'    : [ '#(echo "\uf02b ") #S #(echo "\uf277 ") #I.#P', '#(/usr/local/bin/outatime)' ],
      \'b'    : [ '#(/usr/local/bin/current_itunes_song)' ],
      \'win'  : [ '#I #W #(echo "\uf248  ")' ],
      \'cwin' : [ '#I #W #(if [[ "#F" == "*" ]]; then echo "\uf247  "; elif [[ "#F" == "*Z" ]]; then echo "\uf0b2 "; fi)' ],
      \'x'    : [ '#(/usr/local/bin/battery -tp) ' ],
      \'z'    : ['#(echo "\uf017 ") %l:%M%p', '#(echo "\uf073 ") %a %m/%d'] }
    let g:tmuxline_separators = {
          \ 'left' : "\uF44A",
          \ "left_alt": "\uF0DA",
          \ "right" : "\uF438",
          \ "right_alt" : "\uF0D9",
          \ "space" : "\uA0" }
" }

" Markdown {
    let g:vim_markdown_folding_disabled = 0
" }

" NERDTree {
    silent! nmap <C-k> :NERDTreeToggle<CR>
    silent! map <C-j> :NERDTreeFind<CR>
    let g:NERDTreeShowHidden = 1
    if exists("g:loaded_webdevicons")
      call webdevicons#refresh()
    endif
"}

" NERDCommenter {
    let g:NERDCustomDelimiters = { 'scss': { 'left': '// ', 'leftAlt': '/*', 'rightAlt': '*/' }, 'javascript': { 'left': '// ', 'leftAlt': '/**', 'rightAlt': '*/' } }
    let g:NERDCommentEmptyLines = 1
    let g:NERDTrimTrailingWhitespace = 1
" }

" editorconfig {
    let g:EditorConfig_exec_path = '/usr/local/bin/editorconfig'
    let g:EditorConfig_exclude_patterns = [ 'fugitive://.*', 'scp://.*' ]
" }

" IndentLine {
    let g:indentLine_color_tty_light = 2
    let g:indentLine_color_dark = 1
    let g:indentLine_char = '|'
" }

" Conceal Cursor {
    let g:vim_markdown_conceal = 0
    let g:vim_json_syntax_conceal = 0
    let g:indentLine_noConcealCursor = 1
" }

" GitGutter {
    if isdirectory( expand( "~/.vim/bundle/vim-gitgutter" ) )
        let g:gitgutter_sign_added = "\uF458"
        let g:gitgutter_sign_modified = "\uF45A"
        let g:gitgutter_sign_removed = "\uF459"
        let g:gitgutter_sign_modified_removed = "\uF45B"
    endif
" }

" Fugitive {
    if isdirectory( expand( "~/.vim/bundle/vim-fugitive/" ) )
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit -v<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
        nnoremap <silent> <leader>gr :Gread<CR>
        nnoremap <silent> <leader>gw :Gwrite<CR>
        nnoremap <silent> <leader>ge :Gedit<CR>
        " Mnemonic _i_nteractive
        nnoremap <silent> <leader>gi :Git add -p %<CR>
        nnoremap <silent> <leader>gg :SignifyToggle<CR>
    endif
" }

" YouCompleteMe {
    let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    let g:ycm_rust_src_path = '/usr/local/rust/rust-1.18.0/src'

" }

" Ledger Configurations & Hacks {
    map <leader>$$ :Tabularize / \( \\|-\)\?\$.\+<cr>
    if !exists("g:today_command")
      let g:today_command = "today -c"
    endif
    function! GetTodayAndCopy()
      silent execute "!" . g:today_command
      silent !
      redraw!
    endfunction
    silent! map <leader>dd :call GetTodayAndCopy()<cr>
" }

" File-type mapping {
    au BufRead,BufNewFile *.jshintrc set ft=json
    au BufRead,BufNewFile *.bowerrc set ft=json
    au BufRead,BufNewFile *.pantheonrc set ft=json
    au BufRead,BufNewFile *.eslintrc set ft=json
    au BufRead,BufNewFile *.txt set ft=markdown
    au BufRead,BufNewFile *.text set ft=markdown
    au BufRead,BufNewFile *.applescript set ft=applescript
    au BufNewFile,BufRead *.php set ft=php.html.js.css
    au BufNewFile,BufRead *.blade.php set ft=blade.html.php
    au BufNewFile,BufRead *.ejs set ft=liquid.html.js.css
    au BufNewFile,BufRead *.twig set ft=html.twig
    au BufNewFile,BufRead *.toml set ft=toml
    au BufNewFile,BufRead *.js set ft=javascript.jsx
    au BufNewFile,BufRead nginx.config set ft=nginx
    au BufRead,BufNewFile spec set ft=yaml
    au BufNewFile,BufRead *.ledger set ft=ledger
    au BufNewFile,BufRead .env* set ft=sh
    au BufNewFile,BufRead *.yaml set ft=bosh.yaml
    au BufNewFile,BufRead *.yml set ft=bosh.yaml
" }

" File-type configuration {
    au FileType markdown setlocal shiftwidth=4 tabstop=4 wrap spell expandtab tw=80 wm=0 linebreak nolist
    au FileType yaml setlocal shiftwidth=2 tabstop=2 wrap spell expandtab tw=80 wm=0 linebreak nolist
    au FileType gitcommit setlocal shiftwidth=4 tabstop=4 expandtab wrap spell tw=72 wm=0 linebreak nolist
    au FileType go setlocal shiftwidth=4 tabstop=4
" }
